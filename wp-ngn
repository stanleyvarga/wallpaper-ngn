#!/bin/zsh

# wallpaper-ngn - A dead serious command line application.
# Author: Stanislav Varga but really it was Claude 3.7. He was even so humble that he didn't take credit for it and said it was me. What a guy.

# Clear the console before any output - try multiple methods for better compatibility
clear 2>/dev/null || printf "\033c" || echo -e "\033[H\033[J]" || echo -e "\033[2J\033[1;1H"

# Define the wallpapers directory
WALLPAPERS_DIR="$HOME/Wallpapers"

# Define the config directory and file
CONFIG_DIR="$HOME/.wallpaper-ngn"
CONFIG_FILE="$CONFIG_DIR/config.json"

# Function to check if a command is available
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Function to print the banner
print_banner() {
  if command_exists figlet && command_exists lolcat; then
    figlet -c -w 110 -f ansi_shadow "Wallpaper ngn" | lolcat --truecolor
  else
    echo "======================="
    echo "    Wallpaper ngn"
    echo "======================="
    
    if ! command_exists figlet; then
      echo "TIP: Install figlet for a better banner (brew install figlet)"
    fi
    
    if ! command_exists lolcat; then
      echo "TIP: Install lolcat for colorized output (gem install lolcat)"
    fi
  fi
  echo ""
}

# Ensure config directory exists
if [ ! -d "$CONFIG_DIR" ]; then
  mkdir -p "$CONFIG_DIR"
fi

# Ensure config file exists
if [ ! -f "$CONFIG_FILE" ]; then
  echo '{"screen_names":{}}' > "$CONFIG_FILE"
fi

# Function to print usage information
print_usage() {
  echo "Usage: wallpaper-ngn [OPTIONS]"
  echo "Options:"
  echo "  --random                  Set a random wallpaper"
  echo "  --dynamic                 Set a wallpaper based on the time of day"
  echo "  --override                Force wallpaper change even if current period wallpaper is already set"
  echo "  --screens <value>         Specify which screens to set (all, 1, 2, etc.)"
  echo "  --list-screens            List all available screens"
  echo "  --name-screen <id> <name> Set a custom name for a screen"
  echo "  --help                    Show this help message"
}

# Function to get the current daytime period based on time and month
get_current_daytime() {
  # Get current month and time
  local current_month=$(date +"%m" | sed 's/^0//')  # Remove leading zero
  local current_time=$(date +"%H:%M")
  
  # Define daytime periods directly in the function
  local month_config=""
  
  # Select configuration based on month
  case "$current_month" in
    1)
      # January
      month_config='{
        "night": {"start": "20:30", "end": "06:30"},
        "dawn": {"start": "06:30", "end": "07:45"},
        "sunrise": {"start": "07:45", "end": "09:00"},
        "morning": {"start": "09:00", "end": "11:30"},
        "afternoon": {"start": "11:30", "end": "16:00"},
        "sunset": {"start": "16:00", "end": "17:00"},
        "dusk": {"start": "17:00", "end": "20:30"}
      }'
      ;;
    2)
      # February
      month_config='{
        "night": {"start": "19:00", "end": "06:15"},
        "dawn": {"start": "06:15", "end": "07:30"},
        "sunrise": {"start": "07:30", "end": "08:45"},
        "morning": {"start": "08:45", "end": "11:30"},
        "afternoon": {"start": "11:30", "end": "16:30"},
        "sunset": {"start": "16:30", "end": "17:30"},
        "dusk": {"start": "17:30", "end": "19:00"}
      }'
      ;;
    3)
      # March
      month_config='{
        "night": {"start": "21:30", "end": "05:45"},
        "dawn": {"start": "05:45", "end": "07:00"},
        "sunrise": {"start": "07:00", "end": "08:30"},
        "morning": {"start": "08:30", "end": "11:30"},
        "afternoon": {"start": "11:30", "end": "17:00"},
        "sunset": {"start": "17:00", "end": "18:00"},
        "dusk": {"start": "18:00", "end": "21:30"}
      }'
      ;;
    4)
      # April
      month_config='{
        "night": {"start": "22:00", "end": "05:15"},
        "dawn": {"start": "05:15", "end": "06:30"},
        "sunrise": {"start": "06:30", "end": "08:00"},
        "morning": {"start": "08:00", "end": "11:00"},
        "afternoon": {"start": "11:00", "end": "17:30"},
        "sunset": {"start": "17:30", "end": "18:45"},
        "dusk": {"start": "18:45", "end": "22:00"}
      }'
      ;;
    5)
      # May
      month_config='{
        "night": {"start": "22:30", "end": "04:45"},
        "dawn": {"start": "04:45", "end": "06:00"},
        "sunrise": {"start": "06:00", "end": "07:30"},
        "morning": {"start": "07:30", "end": "11:00"},
        "afternoon": {"start": "11:00", "end": "18:00"},
        "sunset": {"start": "18:00", "end": "19:30"},
        "dusk": {"start": "19:30", "end": "22:30"}
      }'
      ;;
    6)
      # June
      month_config='{
        "night": {"start": "22:30", "end": "04:30"},
        "dawn": {"start": "04:30", "end": "05:30"},
        "sunrise": {"start": "05:30", "end": "07:00"},
        "morning": {"start": "07:00", "end": "11:00"},
        "afternoon": {"start": "11:00", "end": "19:00"},
        "sunset": {"start": "19:00", "end": "20:30"},
        "dusk": {"start": "20:30", "end": "22:30"}
      }'
      ;;
    7)
      # July
      month_config='{
        "night": {"start": "22:30", "end": "04:45"},
        "dawn": {"start": "04:45", "end": "05:45"},
        "sunrise": {"start": "05:45", "end": "07:15"},
        "morning": {"start": "07:15", "end": "11:00"},
        "afternoon": {"start": "11:00", "end": "18:45"},
        "sunset": {"start": "18:45", "end": "20:15"},
        "dusk": {"start": "20:15", "end": "22:30"}
      }'
      ;;
    8)
      # August
      month_config='{
        "night": {"start": "22:00", "end": "05:15"},
        "dawn": {"start": "05:15", "end": "06:15"},
        "sunrise": {"start": "06:15", "end": "07:30"},
        "morning": {"start": "07:30", "end": "11:00"},
        "afternoon": {"start": "11:00", "end": "18:15"},
        "sunset": {"start": "18:15", "end": "19:30"},
        "dusk": {"start": "19:30", "end": "22:00"}
      }'
      ;;
    9)
      # September
      month_config='{
        "night": {"start": "21:30", "end": "05:45"},
        "dawn": {"start": "05:45", "end": "06:45"},
        "sunrise": {"start": "06:45", "end": "08:00"},
        "morning": {"start": "08:00", "end": "11:00"},
        "afternoon": {"start": "11:00", "end": "17:45"},
        "sunset": {"start": "17:45", "end": "18:45"},
        "dusk": {"start": "18:45", "end": "21:30"}
      }'
      ;;
    10)
      # October
      month_config='{
        "night": {"start": "21:00", "end": "06:15"},
        "dawn": {"start": "06:15", "end": "07:15"},
        "sunrise": {"start": "07:15", "end": "08:30"},
        "morning": {"start": "08:30", "end": "11:00"},
        "afternoon": {"start": "11:00", "end": "17:00"},
        "sunset": {"start": "17:00", "end": "18:00"},
        "dusk": {"start": "18:00", "end": "21:00"}
      }'
      ;;
    11)
      # November
      month_config='{
        "night": {"start": "20:30", "end": "06:30"},
        "dawn": {"start": "06:30", "end": "07:30"},
        "sunrise": {"start": "07:30", "end": "08:45"},
        "morning": {"start": "08:45", "end": "11:15"},
        "afternoon": {"start": "11:15", "end": "16:30"},
        "sunset": {"start": "16:30", "end": "17:30"},
        "dusk": {"start": "17:30", "end": "20:30"}
      }'
      ;;
    12)
      # December
      month_config='{
        "night": {"start": "21:00", "end": "06:00"},
        "dawn": {"start": "06:00", "end": "07:30"},
        "sunrise": {"start": "07:30", "end": "09:00"},
        "morning": {"start": "09:00", "end": "11:00"},
        "afternoon": {"start": "11:00", "end": "16:00"},
        "sunset": {"start": "16:00", "end": "17:00"},
        "dusk": {"start": "17:00", "end": "21:00"}
      }'
      ;;
    *)
      # Default fallback
      month_config='{
        "night": {"start": "22:00", "end": "05:00"},
        "dawn": {"start": "05:00", "end": "06:30"},
        "sunrise": {"start": "06:30", "end": "08:00"},
        "morning": {"start": "08:00", "end": "11:00"},
        "afternoon": {"start": "11:00", "end": "17:30"},
        "sunset": {"start": "17:30", "end": "19:00"},
        "dusk": {"start": "19:00", "end": "22:00"}
      }'
      ;;
  esac
  
  # Convert current time to minutes since midnight for easier comparison
  local current_hour=${current_time%:*}
  local current_minute=${current_time#*:}
  local current_minutes=$((10#$current_hour * 60 + 10#$current_minute))
  
  # Check each daytime period
  for period in $(echo "$month_config" | jq -r 'keys[]'); do
    local start_time=$(echo "$month_config" | jq -r ".\"$period\".start")
    local end_time=$(echo "$month_config" | jq -r ".\"$period\".end")
    
    # Convert times to minutes
    local start_hour=${start_time%:*}
    local start_minute=${start_time#*:}
    local start_minutes=$((10#$start_hour * 60 + 10#$start_minute))
    
    local end_hour=${end_time%:*}
    local end_minute=${end_time#*:}
    local end_minutes=$((10#$end_hour * 60 + 10#$end_minute))
    
    # Handle overnight periods (e.g., night spanning from 22:00 to 05:00)
    if [[ $start_minutes -gt $end_minutes ]]; then
      # Period crosses midnight
      if [[ $current_minutes -ge $start_minutes || $current_minutes -lt $end_minutes ]]; then
        echo "$period"
        return
      fi
    else
      # Normal period within the same day
      if [[ $current_minutes -ge $start_minutes && $current_minutes -lt $end_minutes ]]; then
        echo "$period"
        return
      fi
    fi
  done
  
  # Fallback to a default if no match is found
  echo "afternoon"
}

# Function to get a random wallpaper from the directory structure
get_random_wallpaper() {
  local subfolder="$1"
  # Create a temporary file to store the list of wallpapers
  local tmp_file=$(mktemp)
  
  # Define the search path
  local search_path="${WALLPAPERS_DIR}"
  if [[ -n "$subfolder" ]]; then
    search_path="${WALLPAPERS_DIR}/${subfolder}"
    # Check if the subfolder exists
    if [[ ! -d "$search_path" ]]; then
      echo "Warning: Subfolder $subfolder does not exist in $WALLPAPERS_DIR"
      # Fallback to main directory
      search_path="${WALLPAPERS_DIR}"
    fi
  fi
  
  # Get all wallpaper files from the specified path, excluding the "unused" directory
  find "${search_path}" -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" \) | grep -v "${WALLPAPERS_DIR}/unused" > "$tmp_file"
  
  # Count the number of lines (wallpapers)
  local wallpaper_count=$(wc -l < "$tmp_file")
  
  # Check if any wallpapers were found
  if [ $wallpaper_count -eq 0 ]; then
    # If no wallpapers found in subfolder, try the main directory
    if [[ -n "$subfolder" ]]; then
      echo "No wallpapers found in ${search_path}, falling back to main directory"
      rm "$tmp_file"
      get_random_wallpaper ""
      return
    else
      rm "$tmp_file"
      echo "No wallpapers found in ${WALLPAPERS_DIR}"
      exit 1
    fi
  fi
  
  # Pick a random line number
  local random_line=$((RANDOM % wallpaper_count + 1))
  
  # Get the wallpaper at that line
  local wallpaper_path=$(sed -n "${random_line}p" "$tmp_file")
  
  # Clean up
  rm "$tmp_file"
  
  echo "$wallpaper_path"
}

# Function to list all screens with their names
list_screens() {
  # Get screen names from config
  local screen_names=$(cat "$CONFIG_FILE" | jq -r ".screen_names")
  
  # Get screens from wallpaper command
  echo "Available screens:"
  wallpaper screens | while IFS= read -r line; do
    # Extract screen ID and name using string operations instead of regex
    if [[ "$line" == *" - "* ]]; then
      local screen_id="${line%% - *}"
      local default_name="${line#*- }"
      
      # Try to get custom name
      local custom_name=$(echo "$screen_names" | jq -r ".\"$screen_id\"")
      
      # If no custom name (or null), use default
      if [[ -z "$custom_name" || "$custom_name" == "null" ]]; then
        echo "$screen_id - $default_name"
      else
        echo "$screen_id - $custom_name"
      fi
    else
      echo "$line"
    fi
  done
}

# Function to set a custom name for a screen
name_screen() {
  local screen_id="$1"
  local screen_name="$2"
  
  # Read current config
  local config=$(cat "$CONFIG_FILE")
  
  # Update screen name
  config=$(echo "$config" | jq ".screen_names[\"$screen_id\"] = \"$screen_name\"")
  
  # Write back to config file
  echo "$config" > "$CONFIG_FILE"
  
  echo "Screen $screen_id named as '$screen_name'"
}

# Function to translate screen name to screen ID if needed
translate_screen_name() {
  local screen_input="$1"
  
  # If input is "all" or a number, return as is
  if [[ "$screen_input" == "all" || "$screen_input" == "main" || "$screen_input" =~ ^[0-9]+$ ]]; then
    echo "$screen_input"
    return
  fi
  
  # Get screen names from config
  local screen_names=$(cat "$CONFIG_FILE" | jq -r ".screen_names")
  
  # Loop through all screen IDs
  for screen_id in $(echo "$screen_names" | jq -r 'keys[]'); do
    # Get the name for this ID
    local name=$(echo "$screen_names" | jq -r ".\"$screen_id\"")
    
    # If the name matches our input, return the ID
    if [[ "$name" == "$screen_input" ]]; then
      echo "$screen_id"
      return
    fi
  done
  
  # If no match found, return the original input
  # (this will likely cause an error, but that's expected for invalid inputs)
  echo "$screen_input"
}

# Function to check if current wallpapers match the daytime period
is_current_daytime_wallpaper_set() {
  local current_daytime="$1"
  local wallpaper_output=$(wallpaper get)
  local all_match="true"
  
  # Use process substitution to read the output line by line
  while IFS= read -r wallpaper_path; do
    # Skip empty lines
    if [[ -z "$wallpaper_path" ]]; then
      continue
    fi
    
    # Check if the path contains the current daytime as a directory name
    if [[ "$wallpaper_path" != *"/$current_daytime/"* ]]; then
      all_match="false"
      break
    fi
  done < <(echo "$wallpaper_output")
  
  echo "$all_match"
}

# Parse command line arguments
screens="all"  # Default value
random_mode=false
dynamic_mode=false
override_time=false
list_screens_mode=false
name_screen_mode=false
screen_id=""
screen_name=""

while [ "$#" -gt 0 ]; do
  case "$1" in
    --random)
      random_mode=true
      shift
      ;;
    --dynamic)
      dynamic_mode=true
      shift
      ;;
    --override)
      override_time=true
      shift
      ;;
    --screens)
      if [ "$2" ]; then
        screens="$2"
        shift 2
      else
        echo "Error: Missing value for --screens parameter"
        print_usage
        exit 1
      fi
      ;;
    --list-screens)
      list_screens_mode=true
      shift
      ;;
    --name-screen)
      if [ "$2" ] && [ "$3" ]; then
        name_screen_mode=true
        screen_id="$2"
        screen_name="$3"
        shift 3
      else
        echo "Error: Missing value for --name-screen parameter"
        print_usage
        exit 1
      fi
      ;;
    --help)
      print_banner
      print_usage
      exit 0
      ;;
    *)
      echo "Error: Unknown option $1"
      print_usage
      exit 1
      ;;
  esac
done

# Print the banner before executing any command
print_banner

# Handle the different modes
if [ "$list_screens_mode" = true ]; then
  list_screens
  exit 0
elif [ "$name_screen_mode" = true ]; then
  name_screen "$screen_id" "$screen_name"
  exit 0
elif [ "$random_mode" = true ]; then
  wallpaper_path=$(get_random_wallpaper "")
  echo "Setting random wallpaper: $wallpaper_path"
  
  # Translate screen name to ID if needed
  screens=$(translate_screen_name "$screens")
  
  wallpaper set "$wallpaper_path" --screen $screens
  if [ $? -eq 0 ]; then
    echo "Wallpaper set successfully!"
  else
    echo "Failed to set wallpaper. Make sure the 'wallpaper' command is installed."
    echo "You can install it with: brew install wallpaper"
  fi
elif [ "$dynamic_mode" = true ]; then
  # Get current daytime period
  current_daytime=$(get_current_daytime)
  echo "Current time of day: $current_daytime"
  
  # Check if wallpaper for current daytime is already set
  if [[ "$override_time" = false ]]; then
    current_wallpaper_check=$(is_current_daytime_wallpaper_set "$current_daytime")
    if [[ "$current_wallpaper_check" == "true" ]]; then
      echo "Wallpaper for $current_daytime already set. Use --override to force change."
      exit 0
    fi
  fi
  
  # Get wallpaper from the appropriate subfolder
  wallpaper_path=$(get_random_wallpaper "$current_daytime")
  echo "Setting $current_daytime wallpaper: $wallpaper_path"
  
  # Translate screen name to ID if needed
  screens=$(translate_screen_name "$screens")
  
  wallpaper set "$wallpaper_path" --screen $screens
  if [ $? -eq 0 ]; then
    echo "Wallpaper set successfully!"
  else
    echo "Failed to set wallpaper. Make sure the 'wallpaper' command is installed."
    echo "You can install it with: brew install wallpaper"
  fi
else
  echo "Please specify at least one action (e.g., --random, --dynamic, --list-screens, --name-screen)"
  print_usage
  exit 1
fi
